name: Build and deploy an app to AKS with Helm
"on":
    push:
        branches:
            - main
    workflow_dispatch: null
env:
    AZURE_CONTAINER_REGISTRY: cdacn
    CHART_OVERRIDE_PATH: ./charts/production.yaml
    CHART_PATH: ./charts
    CLUSTER_NAME: aks-demo
    CONTAINER_NAME: blazorgeek
    IMAGE_PULL_SECRET_NAME: cdacnsecret
    RESOURCE_GROUP: aks-demo
jobs:
    buildImage:
        permissions:
            contents: read
            id-token: write
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
            - name: Azure login
              uses: azure/login@v1.4.3
              with:
                creds: ${{ secrets.AZURE_CREDENTIALS }}
            - name: Build and push image to ACR
              run: |
                az acr build --image ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ github.sha }} --registry ${{ env.AZURE_CONTAINER_REGISTRY }} -g ${{ env.RESOURCE_GROUP }} .
    createSecret:
        permissions:
            contents: read
            id-token: write
        runs-on: ubuntu-latest
        steps:
            - name: Set up kubelogin for non-interactive login
              run: |
                curl -LO https://github.com/Azure/kubelogin/releases/download/v0.0.20/kubelogin-linux-amd64.zip
                sudo unzip -j kubelogin-linux-amd64.zip -d /usr/local/bin
                rm -f kubelogin-linux-amd64.zip
                kubelogin --version 
            - name: Azure login
              uses: azure/login@v1.4.3
              with:
                creds: ${{ secrets.AZURE_CREDENTIALS }}
            - name: Get K8s context
              uses: azure/aks-set-context@v3.1
              with:
                cluster-name: ${{ env.CLUSTER_NAME }}
                resource-group: ${{ env.RESOURCE_GROUP }}
                admin: 'true'
                use-kubelogin: 'true'
            - id: get-acr-creds
              name: Get ACR credentials
              run: |
                az acr update -n ${{ env.AZURE_CONTAINER_REGISTRY }} -g ${{ env.RESOURCE_GROUP }} --admin-enabled true
                ACR_USERNAME=$(az acr credential show -g ${{ env.RESOURCE_GROUP }} -n ${{ env.AZURE_CONTAINER_REGISTRY }} --query username -o tsv)
                ACR_PASSWORD=$(az acr credential show -g ${{ env.RESOURCE_GROUP }} -n ${{ env.AZURE_CONTAINER_REGISTRY }} --query passwords[0].value -o tsv)
                echo "::add-mask::${ACR_USERNAME}"
                echo "::set-output name=username::${ACR_USERNAME}"
                echo "::add-mask::${ACR_PASSWORD}"
                echo "::set-output name=password::${ACR_PASSWORD}"
            - name: Create K8s secret for pulling image from ACR
              uses: Azure/k8s-create-secret@v1.1
              with:
                container-registry-password: ${{ steps.get-acr-creds.outputs.password }}
                container-registry-url: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io
                container-registry-username: ${{ steps.get-acr-creds.outputs.username }}
                secret-name: ${{ env.IMAGE_PULL_SECRET_NAME }}
    deploy:
        permissions:
            actions: read
            contents: read
            id-token: write
        runs-on: ubuntu-latest
        needs:
            - buildImage
            - createSecret
        steps:
            - uses: actions/checkout@v3
            - name: Set up kubelogin for non-interactive login
              run: |
                curl -LO https://github.com/Azure/kubelogin/releases/download/v0.0.20/kubelogin-linux-amd64.zip
                sudo unzip -j kubelogin-linux-amd64.zip -d /usr/local/bin
                rm -f kubelogin-linux-amd64.zip
                kubelogin --version 
            - name: Azure login
              uses: azure/login@v1.4.3
              with:
                creds: ${{ secrets.AZURE_CREDENTIALS }}
            - name: Get K8s context
              uses: azure/aks-set-context@v3.1
              with:
                cluster-name: ${{ env.CLUSTER_NAME }}
                resource-group: ${{ env.RESOURCE_GROUP }}
                admin: 'true'
                use-kubelogin: 'true'
            - id: bake
              name: Bake deployment
              uses: azure/k8s-bake@v2.1
              with:
                helm-version: latest
                helmChart: ${{ env.CHART_PATH }}
                overrideFiles: ${{ env.CHART_OVERRIDE_PATH }}
                overrides: |
                    replicas:2
                renderEngine: helm
            - name: Deploy application
              uses: Azure/k8s-deploy@v3.1
              with:
                action: deploy
                imagepullsecrets: ${{ env.IMAGE_PULL_SECRET_NAME }}
                images: |
                    ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ github.sha }}
                manifests: ${{ steps.bake.outputs.manifestsBundle }}
